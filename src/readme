// -- CLEF D'AUTHENTIFICATION -- //

Dans notre projet écrire "node": true, dans le fichier esLint dans "env" comme ceci :

env: {
node: true,
browser: true,
es2021: true,
},

// -- DOCS & ENDPOINTS -- //

DOCS API GITHUB :
Doc sur endpoint 'Search' pour la barre de recherche (entre autre) : https://docs.github.com/fr/rest/search?apiVersion=2022-11-28
Doc sur l'url languages du endpoint 'Repos' : https://docs.github.com/fr/rest/repos/repos?apiVersion=2022-11-28#list-repository-languages
Exemple : https://api.github.com/repos/jeromev81600/pokedex/languages
Doc sur Authentification Github API : https://docs.github.com/en/rest/guides/getting-started-with-the-rest-api?apiVersion=2022-11-28#authenticating

ENDPOINTS :
EndPoint sur User : https://api.github.com/users/{user.login}
EndPoint sur repo : https://api.github.com/repos/[{user.login}
EndPoint pour barre de Recherche : https://api.github.com/search/repositories
Endpoint global des languages : https://api.github.com/languages

Pagination :
https://docs.github.com/fr/rest/guides/using-pagination-in-the-rest-api?apiVersion=2022-11-28

---

// - Infos Modifications code : - //

Certains champs non renseignés par l'API pourrons automatiquement être enlevé des listes sur notre site avec un code du type :
{(HTML : {dataUser.html})||none} // qui signifie > si l'expression 'dataUser.html' est vrai j'affiche une valeur) sinon n'affiche rien (none)
Remplacement de..
{dataUsers[count].location}{dataUsers[count].location === !null? dataUsers[count].location: "non renseigné"}
par l'expression :
{el.location || "non renseigné"}

Tentatives de code avec les promesses (promise.all) :

CODE 1

const getProfile = () => {
const getUser=axios.get('https://api.github.com/users?per_page=10')
const getRepo=axios.get(`https://api.github.com/users/${dataUser(count).login}/repos`);

Promise.all([getUser, getRepo])
.then(([response1, response2]) => {
console.log(response1);setDataUsers(response1.data);
console.log(response2);setDataRepo(response2.data[0]);
})
.catch(error => {
console.error('Error:', error);
});}

CODE 2

const fetchDatas= () => {
const fetchRepos =axios.get(`https://api.github.com/users/${dataUsers[count].login}/repos`);
const fetchLanguages=axios.get(`https://api.github.com/repos/${dataUsers[count].login}/${dataUsers[count].repo}/languages`);
if (dataUsers.length > 0) {
/_ setLoading(true);_/
Promise.all([fetchRepos,fetchLanguages ])  
 .then(([response1, response2]) => {
console.log(response1);setDataRepo(response1.data[0]); /_setLoading(false);_/
console.log(response2);setDataLang(response2.data);})
.catch((error)=>{ console.error(error.message); /_setLoading(false);_/})
}}
useEffect(() => {fetchDatas()}, [dataUsers, count/*, setLoading*/]);
